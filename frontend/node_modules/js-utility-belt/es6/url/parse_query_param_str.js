var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

import coreObjectEntries from 'core-js/library/fn/object/entries';
import camelcase from 'camelcase';
import queryString from 'query-string';

/**
 * Convert the given query param string into a key-val dictionary (ie. object).
 *
 * Extends queryString.parse by allowing you to speciiy a `transform` function that will be invoked
 * on each of the query parameter's keys before they are added into the returned object.
 *
 * By default `transform` is `camelcase`, so a query string for the form:
 *
 *   ?page=1&page_size=10
 *
 * will be converted to an object like:
 *
 *   {
 *      page: 1,
 *      pageSize: 10
 *   }
 *
 * @param  {string}   queryParamString      Query params string
 * @param  {function} [transform=camelcase] Transform function for each of the param keys
 * @return {object}                         Query params dictionary
 */
export default function parseQueryParamStr(queryParamString) {
    var transform = arguments.length <= 1 || arguments[1] === undefined ? camelcase : arguments[1];

    if (typeof queryParamString !== 'string') {
        return {};
    }

    var extractedParamString = queryString.extract(queryParamString);
    var parsedObj = queryString.parse(extractedParamString);

    return coreObjectEntries(parsedObj).reduce(function (paramsObj, _ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        paramsObj[transform(key)] = value;
        return paramsObj;
    }, {});
}