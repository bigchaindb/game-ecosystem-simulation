{"remainingRequest":"/Users/jpregelj/eots/frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/jpregelj/eots/frontend/node_modules/angular2-draggable/angular2-draggable.es5.js","dependencies":[{"path":"/Users/jpregelj/eots/frontend/node_modules/angular2-draggable/angular2-draggable.es5.js","mtime":1518081329000},{"path":"/Users/jpregelj/eots/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/jpregelj/eots/frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, Renderer2 } from '@angular/core';\nvar Position = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} x\n     * @param {?} y\n     */\n    function Position(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    Position.fromEvent = function (e) {\n        return new Position(e.clientX, e.clientY);\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.add = function (p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.subtract = function (p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    Position.prototype.reset = function () {\n        this.x = 0;\n        this.y = 0;\n        return this;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    Position.prototype.set = function (p) {\n        this.x = p.x;\n        this.y = p.y;\n        return this;\n    };\n    return Position;\n}());\nvar AngularDraggableDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} el\n     * @param {?} renderer\n     */\n    function AngularDraggableDirective(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.allowDrag = true;\n        this.moving = false;\n        this.orignal = null;\n        this.oldTrans = new Position(0, 0);\n        this.tempTrans = new Position(0, 0);\n        this.oldZIndex = '';\n        this.oldPosition = '';\n        this._zIndex = '';\n        this.started = new EventEmitter();\n        this.stopped = new EventEmitter();\n        this.edge = new EventEmitter();\n        /**\n         * Whether to limit the element stay in the bounds\n         */\n        this.inBounds = false;\n        /**\n         * Whether the element should use it's previous drag position on a new drag event.\n         */\n        this.trackPosition = true;\n        /**\n         * Input css scale transform of element so translations are correct\n         */\n        this.scale = 1;\n        /**\n         * Whether to prevent default event\n         */\n        this.preventDefaultEvent = false;\n    }\n    Object.defineProperty(AngularDraggableDirective.prototype, \"zIndex\", {\n        /**\n         * Set z-index when not dragging\n         * @param {?} setting\n         * @return {?}\n         */\n        set: function (setting) {\n            this.renderer.setStyle(this.el.nativeElement, 'z-index', setting);\n            this._zIndex = setting;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AngularDraggableDirective.prototype, \"ngDraggable\", {\n        /**\n         * @param {?} setting\n         * @return {?}\n         */\n        set: function (setting) {\n            if (setting !== undefined && setting !== null && setting !== '') {\n                this.allowDrag = !!setting;\n                var /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;\n                if (this.allowDrag) {\n                    this.renderer.addClass(element, 'ng-draggable');\n                }\n                else {\n                    this.renderer.removeClass(element, 'ng-draggable');\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.ngOnInit = function () {\n        if (this.allowDrag) {\n            var /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;\n            this.renderer.addClass(element, 'ng-draggable');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.resetPosition = function () {\n        this.oldTrans.reset();\n        this.tempTrans.reset();\n        this.transform();\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.moveTo = function (p) {\n        if (this.orignal) {\n            p.subtract(this.orignal);\n            this.tempTrans.set(p);\n            this.transform();\n            if (this.bounds) {\n                this.edge.emit(this.boundsCheck());\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.transform = function () {\n        var /** @type {?} */ value = \"translate(\" + (this.tempTrans.x + this.oldTrans.x) + \"px, \" + (this.tempTrans.y + this.oldTrans.y) + \"px)\";\n        if (this.scale !== 1) {\n            value += \" scale(\" + this.scale + \")\";\n        }\n        this.renderer.setStyle(this.el.nativeElement, 'transform', value);\n        this.renderer.setStyle(this.el.nativeElement, '-webkit-transform', value);\n        this.renderer.setStyle(this.el.nativeElement, '-ms-transform', value);\n        this.renderer.setStyle(this.el.nativeElement, '-moz-transform', value);\n        this.renderer.setStyle(this.el.nativeElement, '-o-transform', value);\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.pickUp = function () {\n        // get old z-index:\n        this.oldZIndex = this.el.nativeElement.style.zIndex ? this.el.nativeElement.style.zIndex : '';\n        if (window) {\n            this.oldZIndex = window.getComputedStyle(this.el.nativeElement, null).getPropertyValue('z-index');\n        }\n        if (this.zIndexMoving) {\n            this.renderer.setStyle(this.el.nativeElement, 'z-index', this.zIndexMoving);\n        }\n        if (!this.moving) {\n            this.started.emit(this.el.nativeElement);\n            this.moving = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.boundsCheck = function () {\n        if (this.bounds) {\n            var /** @type {?} */ boundary = this.bounds.getBoundingClientRect();\n            var /** @type {?} */ elem = this.el.nativeElement.getBoundingClientRect();\n            var /** @type {?} */ result = {\n                'top': boundary.top < elem.top,\n                'right': boundary.right > elem.right,\n                'bottom': boundary.bottom > elem.bottom,\n                'left': boundary.left < elem.left\n            };\n            if (this.inBounds) {\n                if (!result.top) {\n                    this.tempTrans.y -= elem.top - boundary.top;\n                }\n                if (!result.bottom) {\n                    this.tempTrans.y -= elem.bottom - boundary.bottom;\n                }\n                if (!result.right) {\n                    this.tempTrans.x -= elem.right - boundary.right;\n                }\n                if (!result.left) {\n                    this.tempTrans.x -= elem.left - boundary.left;\n                }\n                this.transform();\n            }\n            return result;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.putBack = function () {\n        if (this._zIndex) {\n            this.renderer.setStyle(this.el.nativeElement, 'z-index', this._zIndex);\n        }\n        else if (this.zIndexMoving) {\n            if (this.oldZIndex) {\n                this.renderer.setStyle(this.el.nativeElement, 'z-index', this.oldZIndex);\n            }\n            else {\n                this.el.nativeElement.style.removeProperty('z-index');\n            }\n        }\n        if (this.moving) {\n            this.stopped.emit(this.el.nativeElement);\n            if (this.bounds) {\n                this.edge.emit(this.boundsCheck());\n            }\n            this.moving = false;\n            if (this.trackPosition) {\n                this.oldTrans.add(this.tempTrans);\n            }\n            this.tempTrans.reset();\n            if (!this.trackPosition) {\n                this.transform();\n            }\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseDown = function (event) {\n        // 1. skip right click;\n        // 2. if handle is set, the element can only be moved by handle\n        if (event.button === 2 || (this.handle !== undefined && !this.checkHandleTarget(event.target, this.handle))) {\n            return;\n        }\n        if (this.preventDefaultEvent) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n        this.orignal = Position.fromEvent(event);\n        this.pickUp();\n    };\n    /**\n     * @param {?} target\n     * @param {?} element\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.checkHandleTarget = function (target, element) {\n        // Checks if the target is the element clicked, then checks each child element of element as well\n        // Ignores button clicks\n        // Ignore elements of type button\n        if (element.tagName === 'BUTTON') {\n            return false;\n        }\n        // If the target was found, return true (handle was found)\n        if (element === target) {\n            return true;\n        }\n        // Recursively iterate this elements children\n        for (var /** @type {?} */ child in element.children) {\n            if (element.children.hasOwnProperty(child)) {\n                if (this.checkHandleTarget(target, element.children[child])) {\n                    return true;\n                }\n            }\n        }\n        // Handle was not found in this lineage\n        // Note: return false is ignore unless it is the parent element\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseUp = function () {\n        this.putBack();\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseLeave = function () {\n        this.putBack();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onMouseMove = function (event) {\n        if (this.moving && this.allowDrag) {\n            if (this.preventDefaultEvent) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            this.moveTo(Position.fromEvent(event));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onTouchEnd = function () {\n        this.putBack();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onTouchStart = function (event) {\n        if (this.handle !== undefined && !this.checkHandleTarget(event.target, this.handle)) {\n            return;\n        }\n        if (this.preventDefaultEvent) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n        this.orignal = Position.fromEvent(event.changedTouches[0]);\n        this.pickUp();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    AngularDraggableDirective.prototype.onTouchMove = function (event) {\n        if (this.moving && this.allowDrag) {\n            if (this.preventDefaultEvent) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            this.moveTo(Position.fromEvent(event.changedTouches[0]));\n        }\n    };\n    return AngularDraggableDirective;\n}());\nvar AngularDraggableModule = /*@__PURE__*/ (function () {\n    function AngularDraggableModule() {\n    }\n    return AngularDraggableModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AngularDraggableModule, AngularDraggableDirective };\n//# sourceMappingURL=angular2-draggable.es5.js.map\n",null]}